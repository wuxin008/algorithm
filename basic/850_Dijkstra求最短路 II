//AcWing
#include<iostream>
#include<cstring>
#include<queue>

using namespace std;

typedef pair<int, int> PII;

const int N = 150010, inf = 0x3f3f3f3f;

int n, m;
int h[N], w[N], e[N], ne[N], idx;
int dist[N], st[N];

void add(int a, int b, int c)
{
    e[idx] = b;
    w[idx] = c;
    ne[idx] = h[a];
    h[a] = idx++;
}

void dijkstra()
{
    memset(dist, inf, sizeof dist);
    dist[1] = 0;
    priority_queue<PII, vector<PII>, greater<PII>> heap;
    heap.push({0, 1});
    
    while (heap.size()) {
        auto t = heap.top();
        heap.pop();
        
        int ver = t.second;
        if (st[ver]) continue;
        st[ver] = 1;
        
        for (int i = h[ver]; i != -1; i = ne[i]) {
            int k = e[i];
            if (dist[k] > dist[ver] + w[i]) {
                dist[k] = dist[ver] + w[i];
                heap.push({dist[k], k});
            }
        }
    }
}

int main()
{
    memset(h, -1, sizeof h);
    
    scanf("%d%d", &n, &m);
    
    while (m--) {
        int a, b, c;
        scanf("%d%d%d", &a, &b, &c);
        add(a, b, c);
    }
    
    dijkstra();
    
    if (dist[n] == inf) cout << -1;
    else cout << dist[n];
    
    return 0;
}
