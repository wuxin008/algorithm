//AcWing
#include<iostream>
#include<cstring>

using namespace std;

const int N = 10010;

int n, m;
int h[N], e[N], ne[N], idx;
int q[N], st[N], in[N], mn[N];

void add(int a, int b)
{
    e[idx] = b;
    ne[idx] = h[a];
    h[a] = idx++;
}

int dfs(int u)
{
    int ma = 0;
    if (mn[u]) return mn[u] + 1;
    for (int i = h[u]; i != -1; i = ne[i]) {
        int k = e[i];
        if (!st[k]) {
            int s = dfs(k);
            ma = max(s, ma);
            st[k] = 1;
        }
    }

    mn[u] = ma;
    return ma + 1;
}

int top_sort()
{
    int hh = 0, tt = -1;
    for (int i = 1; i <= n; ++i) {
        if (!in[i]) q[++tt] = i;
    }

    while (hh <= tt) {
        int head = q[hh++];
        for (int i = h[head]; i != -1; i = ne[i]) {
            int k = e[i];
            in[k]--;
            if (!in[k]) q[++tt] = k;
        }
    }

    return tt == n - 1;
}

/*
8 6
1 2
1 3
3 4
5 6
5 7
8 1
*/
int main()
{
    memset(h, -1, sizeof h);
    scanf("%d%d", &n, &m);

    int x, y;
    for (int i = 0; i < m; ++i) {
        scanf("%d%d", &x, &y);
        add(x, y);
        in[y]++;
    }

    if (!top_sort()) {
        printf("");
        return 0;
    }

    int res = 0;
    for (int i = 1; i <= n; ++i) {
        if (!mn[i]) dfs(i);
        res += mn[i];
    }
    printf("%d", res + 100 * n);
    return 0;
}
