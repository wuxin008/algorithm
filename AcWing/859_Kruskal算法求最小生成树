//AcWing
#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

const int N = 200010, inf = 0x3f3f3f3f;

struct Edge {
    int a, b, w;
    
    bool operator < (const Edge & e) const {
        return w < e.w;
    }
}edges[N];

int n, m;
int p[N];

int find(int x)
{
    if (x != p[x]) p[x] = find(p[x]);
    return p[x];
}

int kruskal()
{
    sort(edges + 1, edges + 1 + m);
    
    for (int i = 1; i <= n; ++i) p[i] = i;
    
    int res = 0, cnt = 0;
    for (int i = 1; i <= m; ++i) {
        int a = edges[i].a, b = edges[i].b, w = edges[i].w;
        if (find(a) != find(b)) {
            p[find(a)] = find(b);
            res += w;
            cnt++;
        }
    }
    
    if (cnt == n - 1) return res;
    else return inf;
}

int main()
{
    cin >> n >> m;
    
    int a, b, w;
    for (int i = 1; i <= m; ++i) {
        scanf("%d%d%d", &a, &b, &w);
        edges[i] = {a, b, w};
    }
    
    int t = kruskal();
    if (t == inf) puts("impossible");
    else printf("%d\n", t);
    
    return 0;
}
