//AcWing
#include<iostream>

using namespace std;

const int N = 100010;

int n;
int h[N], kh[N], hk[N], ss = 0, idx = 0;

void heap_swap(int k1, int k2)
{
    swap(h[k1], h[k2]);
    swap(hk[k1], hk[k2]);
    swap(kh[hk[k1]], kh[hk[k2]]);
}

void up(int k)
{
    while (k / 2 && h[k / 2] > h[k]) {
        heap_swap(k / 2, k);
        k /= 2;
    }
}

void down(int k)
{
    int u = k;
    if (k * 2 <= ss && h[k * 2] < h[u]) u = k * 2;
    if (k * 2 + 1 <= ss && h[k * 2 + 1] < h[u]) u = k * 2 + 1;
    if (u != k) {
        heap_swap(u, k);
        down(u);
    }
}

int main()
{
    cin >> n;
    
    char op[3];
    int k, x;
    while (n--) {
        scanf("%s", op);
        if (op[0] == 'I') {
            scanf("%d", &x);
            ss++;
            idx++;
            kh[idx] = ss;
            hk[ss] = idx;
            h[ss] = x;
            up(ss);
        }
        else if (op[0] == 'P') {
            printf("%d\n", h[1]);
        }
        else if (op[0] == 'D' && op[1] == 'M') {
            heap_swap(1, ss--);
            down(1);
        }
        else if (op[0] == 'D') {
            scanf("%d", &k);
            k = kh[k];
            heap_swap(k, ss--);
            down(k);
            up(k);
        }
        else {
            scanf("%d%d", &k, &x);
            k = kh[k];
            h[k] = x;
            up(k);
            down(k);
        }
    }
}
